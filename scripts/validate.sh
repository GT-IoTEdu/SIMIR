#!/bin/bash

# Script para validar a estrutura do projeto SIMIR

echo "=== Valida√ß√£o da Estrutura do Projeto SIMIR ==="
echo

# Verifica se estamos no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå ERRO: Execute este script a partir da raiz do projeto SIMIR"
    exit 1
fi

echo "‚úì Executando a partir do diret√≥rio correto"

# Verifica arquivos principais
files_to_check=(
    "docker-compose.yml"
    "Dockerfile"
    "README.md"
    "run-test.sh"
    "dev.sh"
)

echo
echo "Verificando arquivos principais..."
for file in "${files_to_check[@]}"; do
    if [ -f "$file" ] || [ -L "$file" ]; then
        echo "‚úì $file"
    else
        echo "‚ùå $file - AUSENTE"
    fi
done

# Verifica scripts
scripts_to_check=(
    "scripts/entrypoint.sh"
    "scripts/check-interface.sh"
    "scripts/setup-permissions.sh"
    "scripts/test-container.sh"
    "scripts/dev.sh"
    "scripts/README.md"
)

echo
echo "Verificando scripts..."
for script in "${scripts_to_check[@]}"; do
    if [ -f "$script" ]; then
        if [ -x "$script" ] || [[ "$script" == *.md ]]; then
            echo "‚úì $script"
        else
            echo "‚ö† $script - SEM PERMISS√ÉO DE EXECU√á√ÉO"
        fi
    else
        echo "‚ùå $script - AUSENTE"
    fi
done

# Verifica diret√≥rios
dirs_to_check=(
    "scripts"
    "site"
    "etc"
    "logs"
    "docs"
)

echo
echo "Verificando diret√≥rios..."
for dir in "${dirs_to_check[@]}"; do
    if [ -d "$dir" ]; then
        echo "‚úì $dir/"
    else
        echo "‚ùå $dir/ - AUSENTE"
    fi
done

# Verifica se o Docker est√° funcionando
echo
echo "Verificando Docker..."
if command -v docker >/dev/null 2>&1; then
    if docker ps >/dev/null 2>&1; then
        echo "‚úì Docker est√° funcionando"
    else
        echo "‚ö† Docker instalado mas sem permiss√£o ou n√£o rodando"
    fi
else
    echo "‚ùå Docker n√£o encontrado"
fi

# Verifica se docker-compose est√° funcionando
if command -v docker-compose >/dev/null 2>&1; then
    echo "‚úì Docker Compose (standalone) dispon√≠vel"
elif docker compose version >/dev/null 2>&1; then
    echo "‚úì Docker Compose (integrado) dispon√≠vel"
else
    echo "‚ö† Docker Compose n√£o encontrado"
fi

echo
echo "=== Comandos dispon√≠veis ==="
echo "‚Ä¢ ./run-test.sh           - Teste completo do container"
echo "‚Ä¢ ./dev.sh help           - Ver todos os comandos de desenvolvimento"
echo "‚Ä¢ ./dev.sh build          - Construir imagem"
echo "‚Ä¢ ./dev.sh start          - Iniciar container"
echo "‚Ä¢ ./dev.sh logs-f         - Acompanhar logs"
echo "‚Ä¢ ./scripts/test-container.sh  - Teste direto"

echo
echo "=== Status ==="
if docker ps | grep -q SIMIR_Z; then
    echo "üü¢ Container SIMIR_Z est√° RODANDO"
    echo "   Use './dev.sh logs-f' para acompanhar logs"
elif docker ps -a | grep -q SIMIR_Z; then
    echo "üü° Container SIMIR_Z existe mas est√° PARADO"
    echo "   Use './dev.sh start' para iniciar"
else
    echo "‚ö™ Container SIMIR_Z n√£o existe"
    echo "   Use './run-test.sh' para criar e testar"
fi

echo
echo "=== Pr√≥ximos passos ==="
echo "1. Execute './run-test.sh' para testar o container"
echo "2. Use './dev.sh logs-f' para acompanhar os logs"
echo "3. Consulte 'scripts/README.md' para troubleshooting"

echo
echo "Valida√ß√£o conclu√≠da!"
