#!/bin/bash

# Script de Verifica√ß√£o dos Problemas Corrigidos - SIMIR Intelligence Framework
# Data: $(date)

echo "=============================================================="
echo "   VERIFICA√á√ÉO DOS PROBLEMAS CORRIGIDOS - SIMIR"
echo "=============================================================="

# Fun√ß√£o para verificar status
check_status() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $2"
    fi
}

echo ""
echo "1. VERIFICA√á√ÉO DE EMOJIS E CARACTERES UNICODE"
echo "--------------------------------------------------------------"

# Verifica se h√° emojis nos arquivos .zeek
EMOJI_COUNT=$(find site/ -name "*.zeek" -exec grep -P "[\x{1F600}-\x{1F64F}]|[\x{1F300}-\x{1F5FF}]|[\x{1F680}-\x{1F6FF}]|[\x{2600}-\x{26FF}]|[\x{2700}-\x{27BF}]" {} \; 2>/dev/null | wc -l)

if [ $EMOJI_COUNT -eq 0 ]; then
    echo "‚úÖ Nenhum emoji encontrado nos arquivos .zeek"
else
    echo "‚ùå Encontrados $EMOJI_COUNT emojis nos arquivos .zeek"
fi

echo ""
echo "2. VERIFICA√á√ÉO DE EVENTOS INCOMPAT√çVEIS"
echo "--------------------------------------------------------------"

# Verifica eventos problem√°ticos
INCOMPATIBLE_EVENTS=$(find site/ -name "*.zeek" -exec grep -E "Intel::read_entry|Intel::item_expired" {} \; 2>/dev/null | wc -l)

if [ $INCOMPATIBLE_EVENTS -eq 0 ]; then
    echo "‚úÖ Nenhum evento incompat√≠vel encontrado"
else
    echo "‚ùå Encontrados $INCOMPATIBLE_EVENTS eventos incompat√≠veis"
fi

echo ""
echo "3. VERIFICA√á√ÉO DO ARQUIVO NOTICE.LOG"
echo "--------------------------------------------------------------"

# Verifica se o container est√° rodando
if docker ps | grep -q "SIMIR_Z"; then
    echo "‚úÖ Container SIMIR_Z est√° executando"
    
    # Verifica se notice.log existe
    if docker exec SIMIR_Z test -f /usr/local/zeek/spool/zeek/notice.log; then
        echo "‚úÖ Arquivo notice.log existe"
        
        # Verifica conte√∫do do notice.log
        NOTICE_COUNT=$(docker exec SIMIR_Z wc -l < /usr/local/zeek/spool/zeek/notice.log 2>/dev/null || echo "0")
        echo "‚úÖ Notice.log cont√©m $NOTICE_COUNT entradas"
        
        # Mostra √∫ltima entrada
        echo ""
        echo "üìã √öltima entrada do notice.log:"
        docker exec SIMIR_Z tail -1 /usr/local/zeek/spool/zeek/notice.log 2>/dev/null || echo "Nenhuma entrada encontrada"
        
    else
        echo "‚ùå Arquivo notice.log n√£o encontrado"
    fi
else
    echo "‚ö†Ô∏è  Container SIMIR_Z n√£o est√° executando"
fi

echo ""
echo "4. VERIFICA√á√ÉO DA SINTAXE DOS ARQUIVOS ZEEK"
echo "--------------------------------------------------------------"

# Testa sintaxe do intelligence framework
echo "üîç Testando sintaxe do intelligence-framework.zeek..."
if docker exec SIMIR_Z zeek -u /usr/local/zeek/share/zeek/site/intelligence-framework.zeek >/dev/null 2>&1; then
    echo "‚úÖ Sintaxe do intelligence-framework.zeek est√° correta"
else
    echo "‚ùå Problemas de sintaxe no intelligence-framework.zeek"
fi

# Testa sintaxe do local.zeek
echo "üîç Testando sintaxe do local.zeek..."
if docker exec SIMIR_Z zeek -u /usr/local/zeek/share/zeek/site/local.zeek >/dev/null 2>&1; then
    echo "‚úÖ Sintaxe do local.zeek est√° correta"
else
    echo "‚ùå Problemas de sintaxe no local.zeek"
fi

echo ""
echo "5. VERIFICA√á√ÉO DO FUNCIONAMENTO DO INTELLIGENCE FRAMEWORK"
echo "--------------------------------------------------------------"

# Verifica mensagens de inicializa√ß√£o
if docker exec SIMIR_Z grep -q "SIMIR Intelligence Framework INICIADO" /usr/local/zeek/spool/zeek/stderr.log 2>/dev/null; then
    echo "‚úÖ Intelligence Framework est√° inicializando corretamente"
else
    echo "‚ö†Ô∏è  Mensagens de inicializa√ß√£o n√£o encontradas (normal se rec√©m iniciado)"
fi

# Verifica feeds configurados
FEED_COUNT=$(grep -c "intel.*txt" site/intelligence-framework.zeek 2>/dev/null || echo "0")
echo "‚úÖ $FEED_COUNT feeds de intelligence configurados"

echo ""
echo "6. VERIFICA√á√ÉO DE LOGS DE ERROR"
echo "--------------------------------------------------------------"

if docker exec SIMIR_Z test -f /usr/local/zeek/spool/zeek/stderr.log; then
    ERROR_COUNT=$(docker exec SIMIR_Z grep -c -i "error\|fatal" /usr/local/zeek/spool/zeek/stderr.log 2>/dev/null || echo "0")
    if [ $ERROR_COUNT -eq 0 ]; then
        echo "‚úÖ Nenhum erro encontrado nos logs"
    else
        echo "‚ö†Ô∏è  Encontrados $ERROR_COUNT erros nos logs"
        echo "üìã √öltimos erros:"
        docker exec SIMIR_Z grep -i "error\|fatal" /usr/local/zeek/spool/zeek/stderr.log 2>/dev/null | tail -3
    fi
else
    echo "‚ö†Ô∏è  Arquivo de log de erro n√£o encontrado"
fi

echo ""
echo "=============================================================="
echo "                    RESUMO DA VERIFICA√á√ÉO"
echo "=============================================================="

TOTAL_CHECKS=6
PASSED_CHECKS=0

# Contagem dos checks (simplificada)
[ $EMOJI_COUNT -eq 0 ] && ((PASSED_CHECKS++))
[ $INCOMPATIBLE_EVENTS -eq 0 ] && ((PASSED_CHECKS++))
docker ps | grep -q "SIMIR_Z" && docker exec SIMIR_Z test -f /usr/local/zeek/spool/zeek/notice.log && ((PASSED_CHECKS++))
docker exec SIMIR_Z zeek -u /usr/local/zeek/share/zeek/site/intelligence-framework.zeek >/dev/null 2>&1 && ((PASSED_CHECKS++))
docker exec SIMIR_Z zeek -u /usr/local/zeek/share/zeek/site/local.zeek >/dev/null 2>&1 && ((PASSED_CHECKS++))
[ $FEED_COUNT -gt 0 ] && ((PASSED_CHECKS++))

echo "‚úÖ Verifica√ß√µes aprovadas: $PASSED_CHECKS/$TOTAL_CHECKS"

if [ $PASSED_CHECKS -eq $TOTAL_CHECKS ]; then
    echo "üéâ TODOS OS PROBLEMAS FORAM RESOLVIDOS COM SUCESSO!"
else
    echo "‚ö†Ô∏è  Ainda existem alguns pontos que precisam de aten√ß√£o"
fi

echo ""
echo "=============================================================="