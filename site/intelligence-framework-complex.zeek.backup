# Intelligence Framework para SIMIR
# Detecta indicadores de ameaças (IOCs) usando feeds de inteligência

@load base/frameworks/intel
@load base/frameworks/notice

module Intelligence;

export {
    # Tipos de alertas de inteligência
    redef enum Notice::Type += {
        ## Indica que um indicador de inteligência foi observado
        Intel_Hit,
        ## IP malicioso detectado
        Malicious_IP,
        ## Domínio malicioso detectado
        Malicious_Domain,
        ## Hash malicioso detectado
        Malicious_Hash,
        ## URL maliciosa detectada
        Malicious_URL
    };

    # Configurações
    const intel_log_file = "/usr/local/zeek/logs/current/intelligence.log" &redef;
    const enable_intel_logging = T &redef;
}

# Configurações do framework de inteligência
redef Intel::read_files += {
    "/usr/local/zeek/share/zeek/site/intel/malicious-ips.txt",
    "/usr/local/zeek/share/zeek/site/intel/suricata-malware.txt",
    "/usr/local/zeek/share/zeek/site/intel/suricata-compromised.txt",
    "/usr/local/zeek/share/zeek/site/intel/suricata-botcc.txt",
    "/usr/local/zeek/share/zeek/site/intel/hostfile-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/malware-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/tor-exits.txt",
    "/usr/local/zeek/share/zeek/site/intel/spamhaus-drop.txt",
    "/usr/local/zeek/share/zeek/site/intel/urlhaus-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/feodo-ips.txt",
    "/usr/local/zeek/share/zeek/site/intel/malicious-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/hostfile-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/malware-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/tor-exits.txt",
    "/usr/local/zeek/share/zeek/site/intel/spamhaus-drop.txt",
    "/usr/local/zeek/share/zeek/site/intel/urlhaus-domains.txt",
    "/usr/local/zeek/share/zeek/site/intel/feodo-ips.txt",
    "/usr/local/zeek/share/zeek/site/intel/malicious-urls.txt",
    "/usr/local/zeek/share/zeek/site/intel/suricata-malware.txt",
    "/usr/local/zeek/share/zeek/site/intel/suricata-compromised.txt",
    "/usr/local/zeek/share/zeek/site/intel/suricata-botcc.txt"
};

# Evento disparado quando um indicador de inteligência é encontrado
event Intel::match(s: Intel::Seen, items: set[Intel::Item])
{
    for ( item in items ) {
        local msg = "";
        local notice_type = Intelligence::Intel_Hit;
        
        # Determina o tipo de IOC e cria mensagem apropriada
        switch ( item$indicator_type ) {
            case Intel::ADDR:
                notice_type = Intelligence::Malicious_IP;
                msg = fmt("IP malicioso detectado: %s (Fonte: %s) - %s", 
                         s$indicator, item$meta$source, item$meta$desc);
                break;
            
            case Intel::DOMAIN:
                notice_type = Intelligence::Malicious_Domain;
                msg = fmt("Domínio malicioso detectado: %s (Fonte: %s) - %s", 
                         s$indicator, item$meta$source, item$meta$desc);
                break;
                
            case Intel::URL:
                notice_type = Intelligence::Malicious_URL;
                msg = fmt("URL maliciosa detectada: %s (Fonte: %s) - %s", 
                         s$indicator, item$meta$source, item$meta$desc);
                break;
                
            case Intel::FILE_HASH:
                notice_type = Intelligence::Malicious_Hash;
                msg = fmt("Hash malicioso detectado: %s (Fonte: %s) - %s", 
                         s$indicator, item$meta$source, item$meta$desc);
                break;
                
            default:
                msg = fmt("Indicador de ameaça detectado: %s (Tipo: %s, Fonte: %s) - %s", 
                         s$indicator, item$indicator_type, item$meta$source, item$meta$desc);
                break;
        }

        # Gera alerta
        NOTICE([$note=notice_type,
                $msg=msg,
                $src=s$host,
                $identifier=cat(s$indicator)]);
    }
}

# Log personalizado para inteligência
event zeek_init()
{
    # Log de inteligência é gerenciado automaticamente pelo framework Intel
}

# Evento para conexões - verifica IPs contra feeds de inteligência
event connection_established(c: connection)
{
    Intel::seen([$host=c$id$orig_h,
                 $where=Intel::IN_ANYWHERE]);
    Intel::seen([$host=c$id$resp_h,
                 $where=Intel::IN_ANYWHERE]);
}

# Evento para DNS - verifica domínios contra feeds de inteligência
event dns_request(c: connection, msg: dns_msg, query: string, qtype: count, qclass: count)
{
    Intel::seen([$indicator=query,
                 $indicator_type=Intel::DOMAIN,
                 $host=c$id$orig_h,
                 $where=Intel::IN_ANYWHERE]);
}

# Evento para HTTP - verifica URLs e domínios
event http_request(c: connection, method: string, original_URI: string, unescaped_URI: string, version: string)
{
    if ( c$http?$host ) {
        Intel::seen([$indicator=c$http$host,
                     $indicator_type=Intel::DOMAIN,
                     $host=c$id$orig_h,
                     $where=Intel::IN_ANYWHERE]);
    }
    
    if ( unescaped_URI != "" ) {
        Intel::seen([$indicator=unescaped_URI,
                     $indicator_type=Intel::URL,
                     $host=c$id$orig_h,
                     $where=Intel::IN_ANYWHERE]);
    }
}

print "Intelligence Framework carregado com sucesso!";
